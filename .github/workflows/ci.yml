# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# Workflow syntax reference:
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: CI

on:
  # Deploys with overwrite as current package.json version to main deploy
  # New versions are deployed with `deploy` build
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  # This is used by the SharedProps to detect a PR build
  PR_NUMBER: ${{ github.event.pull_request.number }}
  APP_NAME: release
  APP_PACKAGE_NAME: '@pwrdrvr/microapps-app-release'
  ENV: prod
  DEPLOYER_LAMBDA_NAME: microapps-core-ghpublic-deployer-prod
  AWS_REGION: us-east-2
  CDK_CONTEXT_ARGS: '--context @pwrdrvr/microapps:tableName=microapps-core-ghpublic-prod --context @pwrdrvr/microapps:s3BucketName=com.pwrdrvr.ghpublic.apps'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      prSuffix: ${{ steps.prSuffix.outputs.prSuffix }}
      packageVersion: ${{ steps.packageVersion.outputs.packageVersion }}
    steps:
      - uses: actions/checkout@v2

      - name: Compute PR Suffix
        id: prSuffix
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo "::set-output name=prSuffix::-pr-${PR_NUMBER}"
            echo "PR_SUFFIX=-pr-"${PR_NUMBER} >> $GITHUB_ENV
          else
            echo "::set-output name=prSuffix::"
            echo "PR_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Set Hotswap Flag
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo "HOTSWAP_FLAG=--hotswap" >> $GITHUB_ENV
          else
            echo "HOTSWAP_FLAG=" >> $GITHUB_ENV
          fi

      - name: Extract Current NPM Version
        run: |
          echo 'PACKAGE_VERSION_ORIG='$(node -p -e "require('./package.json').version") >> $GITHUB_ENV

      - name: Compute NPM Version
        id: packageVersion
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG}-pr.${PR_NUMBER} >> $GITHUB_ENV
            echo "::set-output name=packageVersion::${PACKAGE_VERSION_ORIG}-pr.${PR_NUMBER}"
          else
            echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG} >> $GITHUB_ENV
            echo "::set-output name=packageVersion::${PACKAGE_VERSION_ORIG}"
          fi

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install Node Modules
        run: yarn install --frozen-lockfile

      # Fixes errors due to JSII tsconfig.json not ignoring libs
      # node_modules/flatpickr/dist/types/instance.d.ts(37,21): error TS2304: Cannot find name 'Node'.
      # Error: node_modules/flatpickr/dist/types/instance.d.ts(82,56): error TS2304: Cannot find name 'HTMLElementTagNameMap'.
      # Error: node_modules/@types/carbon-components-react/lib/components/FileUploader/FileUploaderDropContainer.d.ts(46,80): error TS2304: Cannot find name 'File'.
      # Error: node_modules/@types/overlayscrollbars/index.d.ts(348,19): error TS2304: Cannot find name 'NodeListOf'.
      - name: Modify cdk-construct tsconfig.json
        run: |
          mv ./packages/cdk-construct/tsconfig.json ./packages/cdk-construct/tsconfig.jsii.json
          jq ".compilerOptions += { \"skipLibCheck\": true }" ./packages/cdk-construct/tsconfig.jsii.json > ./packages/cdk-construct/tsconfig.json

      - name: Build All TypeScript
        run: npm run build

      - name: Lint
        run: npm run lint

      - name: Apply NPM Version
        if: github.event_name == 'pull_request'
        run: |
          npm version ${PACKAGE_VERSION} --no-git-tag-version --workspaces

      - name: Create version.txt
        run: echo ${PACKAGE_VERSION} > version.txt
      - name: Upload version.txt
        uses: actions/upload-artifact@v2
        with:
          name: version-txt
          path: version.txt

      - name: Apply Next.js Version
        run: |
          npx -w ${APP_PACKAGE_NAME} microapps-publish nextjs-version -n ${PACKAGE_VERSION}

      - name: Build Next.js
        run: |
          yarn workspace ${APP_PACKAGE_NAME} serverless

      # Upload Artifact
      - name: Zip Package
        working-directory: packages/app/
        run: zip -r next.zip .next
      - name: Upload Zip
        uses: actions/upload-artifact@v2
        with:
          name: app_zip
          path: packages/app/next.zip

  build-storybook:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install Node Modules
        run: yarn install --frozen-lockfile

      - name: Extract Current NPM Version
        run: |
          echo 'PACKAGE_VERSION_ORIG='$(node -p -e "require('./package.json').version") >> $GITHUB_ENV

      - name: Compute NPM Version
        id: packageVersion
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG}-pr.${PR_NUMBER} >> $GITHUB_ENV
            echo "::set-output name=packageVersion::${PACKAGE_VERSION_ORIG}-pr.${PR_NUMBER}"
          else
            echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG} >> $GITHUB_ENV
            echo "::set-output name=packageVersion::${PACKAGE_VERSION_ORIG}"
          fi

      - name: Apply NPM Version
        if: github.event_name == 'pull_request'
        run: |
          npm version ${PACKAGE_VERSION} --no-git-tag-version --workspaces

      - name: Build Story Book
        run: |
          npm run -w ${APP_PACKAGE_NAME} build-storybook

      # Upload Artifact
      - name: Zip Package
        working-directory: packages/app/
        run: zip -r storybook-static.zip storybook-static
      - name: Upload Zip
        uses: actions/upload-artifact@v2
        with:
          name: storybook_zip
          path: packages/app/storybook-static.zip

  deploy-ghpublic:
    needs:
      - build
      - build-storybook
    concurrency:
      group: deploy-ghpublic-${{ github.workflow }}-${{ github.event.pull_request.number }}
      cancel-in-progress: false
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment:
      name: ghpublic
      url: https://apps.ghpublic.pwrdrvr.com/${{ env.APP_NAME }}/${{ needs.build.outputs.packageVersion }}

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'

      - name: Install Node Modules
        run: yarn install --frozen-lockfile

      # Fixes errors due to JSII tsconfig.json not ignoring libs
      # node_modules/flatpickr/dist/types/instance.d.ts(37,21): error TS2304: Cannot find name 'Node'.
      # Error: node_modules/flatpickr/dist/types/instance.d.ts(82,56): error TS2304: Cannot find name 'HTMLElementTagNameMap'.
      # Error: node_modules/@types/carbon-components-react/lib/components/FileUploader/FileUploaderDropContainer.d.ts(46,80): error TS2304: Cannot find name 'File'.
      # Error: node_modules/@types/overlayscrollbars/index.d.ts(348,19): error TS2304: Cannot find name 'NodeListOf'.
      - name: Modify cdk-construct tsconfig.json
        run: |
          mv ./packages/cdk-construct/tsconfig.json ./packages/cdk-construct/tsconfig.jsii.json
          jq ".compilerOptions += { \"skipLibCheck\": true }" ./packages/cdk-construct/tsconfig.jsii.json > ./packages/cdk-construct/tsconfig.json

      - name: Build All TypeScript
        run: npm run build

      - name: Download Artifact - App
        uses: actions/download-artifact@v2
        with:
          name: app_zip
          path: packages/app/

      - name: Unzip Artifact - App
        working-directory: packages/app/
        run: unzip next.zip

      # Copy the static files to where microapps-publish will look for them
      # Note: we allow a copy in the Lambdas so that testing that bypasses
      # CloudFront can still load the static files.
      # This can be replaced with an express route in `server.ts` that proxies the static
      # file requests to S3 if the Lambda code size needs to be reduced.
      - name: Copy Static Files for microapps-publish
        working-directory: packages/app/
        run: |
          mkdir .static_files
          cp -R .next/static .static_files

      - name: Download Artifact - Story Book
        uses: actions/download-artifact@v2
        with:
          name: storybook_zip
          path: packages/app/

      - name: Unzip Artifact - App
        working-directory: packages/app/
        run: unzip storybook-static.zip

      - name: Download Artifact - Version.txt
        uses: actions/download-artifact@v2
        with:
          name: version-txt
      - run: echo PACKAGE_VERSION=$(cat version.txt) >> $GITHUB_ENV

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-session-name: microapps-app-${{ env.APP_NAME }}-build
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/builder-writeRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Preflight Check Version - App
        run: |
          npx microapps-publish preflight -a ${APP_NAME} -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} --overwrite

      - name: Preflight Check Version - Story Book
        run: |
          npx microapps-publish preflight -a ${APP_NAME}-storybook -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} --overwrite

      - name: Deploy CDK Stack - App
        run: npx cdk deploy ${CDK_CONTEXT_ARGS} ${HOTSWAP_FLAG} --require-approval never app

      - name: Publish to MicroApps - App
        run: |
          npx microapps-publish publish -a ${APP_NAME} -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} -l microapps-app-${APP_NAME}-${ENV}${{ needs.build.outputs.prSuffix }} -s packages/app/.static_files/assets/${APP_NAME}/${PACKAGE_VERSION} --overwrite --noCache

      - name: Publish MicroApps - Story Book
        run: |
          npx microapps-publish publish-static -a ${APP_NAME}-storybook -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} -s packages/app/storybook-static -i index.html --overwrite --noCache
